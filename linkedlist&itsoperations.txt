#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
}*first = NULL;

void create(int A[],int n){
    int i;
    struct Node *t,*last;
    first = (struct Node *)malloc(sizeof(struct Node));
    first->data =A[0];
    first -> next = NULL;
    last = first;
    for(i = 1;i<n;i++){
        t= (struct Node *)malloc(sizeof(struct Node));
        t->data= A[i];
        t->next = NULL;
        last ->next = t;
        last = t;
    }
}
int count(struct Node *p){
    int z = 0;
    while(p!= NULL){
        z++;
        p = p->next;
    }
    return z;
}
int sum(struct Node *p){
    int s =0;
    while(p != NULL){
        s += p->data;
        p= p->next;
    }
    printf("Sum of all LL is : %d\n" , s);
    return 0;
}
int max(struct Node *p){
    int max = p->data;
    while(p != NULL){
        if(p->data>max){
            max = p->data;
            
        }
        p=p->next;
        
    }
    printf("Max element in LL is : %d\n",max);
    return 0;
}
int search(struct Node *p,int key){
    int count = 0;
    while(p != NULL){
        if(p->data == key){
            count++;
            break;
        }
        p=p->next;
        
    }
    if(count>0){
        printf("Key found\n");
    }else{
        printf("Key not found\n");
    }
}
void insert(struct Node *p,int index,int x){
    
    struct Node *t=(struct Node *)malloc(sizeof(struct Node));
    t->data = x;
    p= first;
    
    for(int i = 0;i<index-1;i++){
        p = p->next;
    }
    t->next = p ->next;
    p->next = t;
    
}
int del(struct Node *p,int index){
    struct Node *q;
    int x =-1;
    if(index==1){
        q = first;
        x = first ->data;
        first = first ->next;
        free(q);
        return x;
    }else{
        for(int i = 0;i<index-1;i++){
            q=p;
            p=p->next;
        }
        q->next = p -> next;
        x = p->data;
        free(p);
        return x;
    }
    
    
}
void duplicate(struct Node *p){
    struct Node *q = p->next;
    
    while(q != NULL){
        if(p->data != q->data){
            p=q;
            q=q->next;
        }else{
            p->next = q->next;
            free(q);
            q = p->next;
        }
    }
}
void reverse(struct Node *p){
    int *A ;
    int i=0;
    struct Node *q = p;
    A=(int *)malloc(sizeof(int)*count(p));
    while(q!= NULL){
        A[i]=q->data ;
        q= q->next;
        i++;
    }
    q=p;
    i--;
    while(q!= NULL){
        q->data=A[i] ;
        q = q->next;
        i--;
    }
    
}

void Display(struct Node *p){
    while(p != NULL){
        printf("%d ",p->data);
        p = p-> next;
    }
}
int main() {
	// your code goes here
	struct Node *p;
	int A[] = {3, 4, 5, 6, 8};
	create(A,5);
	//sum(first);
	//max(first);
	//search(first,9);
	//insert(first,4,7);
	//del(first,2);
	//duplicate(first);
	reverse(first);
	Display(first);
	

}

